import { Request, Response } from 'express'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'

// Adiciona a propriedade 'user' ao tipo Request do Express
declare global {
  namespace Express {
    interface Request {
      user?: any
    }
  }
}

const prisma = new PrismaClient()

export const authenticateToken = (req: Request, res: Response, next: any) => {
  const authHeader = req.headers['authorization']
  const token = authHeader && authHeader.split(' ')[1]

  if (!token) {
    return res.status(401).json({ error: 'Token de acesso requerido' })
  }

  jwt.verify(token, process.env.JWT_SECRET || 'seu_jwt_secret_aqui', (err: any, user: any) => {
    if (err) {
      return res.status(403).json({ error: 'Token inv√°lido' })
    }
    req.user = user
    next()
  })
}

export class AuthController {
  
  // Registrar novo usu√°rio
  async register(req: Request, res: Response) {
    try {
      const { name, email, password, role = 'USER' } = req.body

      console.log('üìù Registrando novo usu√°rio:', email)

      // Valida√ß√µes b√°sicas
      if (!name || !email || !password) {
        return res.status(400).json({
          error: 'Dados obrigat√≥rios',
          message: 'Nome, email e senha s√£o obrigat√≥rios'
        })
      }

      if (password.length < 6) {
        return res.status(400).json({
          error: 'Senha muito fraca',
          message: 'A senha deve ter pelo menos 6 caracteres'
        })
      }

      // Verificar se usu√°rio j√° existe
      const existingUser = await prisma.user.findUnique({
        where: { email }
      })

      if (existingUser) {
        return res.status(409).json({
          error: 'Email j√° cadastrado',
          message: 'J√° existe um usu√°rio com este email'
        })
      }

      // Hash da senha
      const saltRounds = 10
      const hashedPassword = await bcrypt.hash(password, saltRounds)

      // Criar usu√°rio
      const user = await prisma.user.create({
        data: {
          name,
          email,
          password: hashedPassword,
          role
        },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          createdAt: true
        }
      })

      console.log('‚úÖ Usu√°rio criado:', user.email)

      res.status(201).json({
        success: true,
        message: 'Usu√°rio criado com sucesso',
        user
      })

    } catch (error) {
      console.error('üí• Erro ao registrar usu√°rio:', error)
      res.status(500).json({
        error: 'Erro interno do servidor',
        message: 'Falha ao criar usu√°rio'
      })
    }
  }

  // Login
  async login(req: Request, res: Response) {
    try {
      const { email, password } = req.body

      console.log('üîê Tentativa de login:', email)

      // Valida√ß√µes b√°sicas
      if (!email || !password) {
        return res.status(400).json({
          error: 'Dados obrigat√≥rios',
          message: 'Email e senha s√£o obrigat√≥rios'
        })
      }

      // Buscar usu√°rio
      const user = await prisma.user.findUnique({
        where: { email }
      })

      if (!user) {
        return res.status(401).json({
          error: 'Credenciais inv√°lidas',
          message: 'Email ou senha incorretos'
        })
      }

      // Verificar senha
      const isValidPassword = await bcrypt.compare(password, user.password)

      if (!isValidPassword) {
        return res.status(401).json({
          error: 'Credenciais inv√°lidas',
          message: 'Email ou senha incorretos'
        })
      }

      // Gerar JWT
      const token = jwt.sign(
        { 
          id: user.id, 
          email: user.email, 
          role: user.role 
        },
        process.env.JWT_SECRET || 'seu_jwt_secret_aqui',
        { expiresIn: '24h' }
      )

      // Atualizar √∫ltimo login
      await prisma.user.update({
        where: { id: user.id },
        data: { lastLogin: new Date() }
      })

      console.log('‚úÖ Login realizado:', user.email)

      res.json({
        success: true,
        message: 'Login realizado com sucesso',
        token,
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role
        }
      })

    } catch (error) {
      console.error('üí• Erro no login:', error)
      res.status(500).json({
        error: 'Erro interno do servidor',
        message: 'Falha no login'
      })
    }
  }

  // Verificar token (para rotas protegidas)
  async verifyToken(req: Request, res: Response) {
    try {
      const user = req.user

      if (!user) {
        return res.status(401).json({
          error: 'Token inv√°lido'
        })
      }

      // Buscar dados atualizados do usu√°rio
      const currentUser = await prisma.user.findUnique({
        where: { id: user.id },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          lastLogin: true,
          createdAt: true
        }
      })

      if (!currentUser) {
        return res.status(404).json({
          error: 'Usu√°rio n√£o encontrado'
        })
      }

      res.json({
        success: true,
        user: currentUser
      })

    } catch (error) {
      console.error('üí• Erro na verifica√ß√£o do token:', error)
      res.status(500).json({
        error: 'Erro interno do servidor'
      })
    }
  }

  // Listar usu√°rios (apenas para admins)
  async getUsers(req: Request, res: Response) {
    try {
      const currentUser = req.user

      if (currentUser.role !== 'ADMIN') {
        return res.status(403).json({
          error: 'Acesso negado',
          message: 'Apenas administradores podem listar usu√°rios'
        })
      }

      const users = await prisma.user.findMany({
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          lastLogin: true,
          createdAt: true
        },
        orderBy: {
          createdAt: 'desc'
        }
      })

      res.json({
        success: true,
        users
      })

    } catch (error) {
      console.error('üí• Erro ao listar usu√°rios:', error)
      res.status(500).json({
        error: 'Erro interno do servidor'
      })
    }
  }

  // Logout (opcionalmente blacklist o token)
  async logout(req: Request, res: Response) {
    try {
      // Em uma implementa√ß√£o mais robusta, voc√™ poderia adicionar
      // o token a uma blacklist no banco de dados ou Redis
      
      console.log('üëã Logout realizado')

      res.json({
        success: true,
        message: 'Logout realizado com sucesso'
      })

    } catch (error) {
      console.error('üí• Erro no logout:', error)
      res.status(500).json({
        error: 'Erro interno do servidor'
      })
    }
  }

  // Alterar senha
  async changePassword(req: Request, res: Response) {
    try {
      const { currentPassword, newPassword } = req.body
      const userId = req.user.id

      console.log('üîë Alterando senha do usu√°rio:', userId)

      if (!currentPassword || !newPassword) {
        return res.status(400).json({
          error: 'Dados obrigat√≥rios',
          message: 'Senha atual e nova senha s√£o obrigat√≥rias'
        })
      }

      if (newPassword.length < 6) {
        return res.status(400).json({
          error: 'Senha muito fraca',
          message: 'A nova senha deve ter pelo menos 6 caracteres'
        })
      }

      // Buscar usu√°rio
      const user = await prisma.user.findUnique({
        where: { id: userId }
      })

      if (!user) {
        return res.status(404).json({
          error: 'Usu√°rio n√£o encontrado'
        })
      }

      // Verificar senha atual
      const isValidPassword = await bcrypt.compare(currentPassword, user.password)

      if (!isValidPassword) {
        return res.status(401).json({
          error: 'Senha atual incorreta'
        })
      }

      // Hash da nova senha
      const hashedNewPassword = await bcrypt.hash(newPassword, 10)

      // Atualizar senha
      await prisma.user.update({
        where: { id: userId },
        data: { password: hashedNewPassword }
      })

      console.log('‚úÖ Senha alterada com sucesso')

      res.json({
        success: true,
        message: 'Senha alterada com sucesso'
      })

    } catch (error) {
      console.error('üí• Erro ao alterar senha:', error)
      res.status(500).json({
        error: 'Erro interno do servidor'
      })
    }
  }
}